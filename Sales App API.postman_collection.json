{
	"info": {
		"_postman_id": "899ac0e7-166a-4bce-a763-44e94b86eae7",
		"name": "Sales App API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "13639797"
	},
	"item": [
		{
			"name": "Clients",
			"item": [
				{
					"name": "Get All Clients",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response is an array', function() {",
									"    pm.expect(pm.response.json()).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/clients",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"clients"
							]
						},
						"description": "Fetches all clients from the system. Expected to return a list of client objects."
					},
					"response": []
				},
				{
					"name": "Create Client",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function() {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Response contains client id', function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.be.a('number');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"John2\",\n\t\"lastName\": \"Doe\",\n\t\"mobile\": \"1234567890\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/clients",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"clients"
							]
						},
						"description": "Creates a new client in the system. Requires 'name', 'lastName', and 'mobile' in the request body."
					},
					"response": []
				},
				{
					"name": "Update Client",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200 or 204', function() {",
									"    pm.expect(pm.response.status).to.be.oneOf(['OK', '204 No Content']);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"John Updated\",\n\t\"lastName\": \"Doe\",\n\t\"mobile\": \"0987654321\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/clients/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"clients",
								"1"
							]
						},
						"description": "Updates an existing client's details. The client's 'id' is specified in the URL. The request body should contain the 'name', 'lastName', and 'mobile'."
					},
					"response": []
				}
			]
		},
		{
			"name": "Products",
			"item": [
				{
					"name": "Get All Products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response is an array', function() {",
									"    pm.expect(pm.response.json()).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/products",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"products"
							]
						},
						"description": "Retrieves all products from the system. Expected to return a list of product objects with details such as name, description, category, and creation date."
					},
					"response": []
				},
				{
					"name": "Create Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function() {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Response contains product ID', function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.be.a('number');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"Product C\",\n\t\"description\": \"Description C\",\n\t\"category\": \"Category C\",\n\t\"creationDate\": \"2023-01-01\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/products",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"products"
							]
						},
						"description": "Creates a new product with the specified name, description, category, and creation date. The response should include the created product's details, including its ID."
					},
					"response": []
				},
				{
					"name": "Update Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200 or 204', function() {",
									"    pm.expect(pm.response.status).to.be.oneOf(['OK', '204 No Content']);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"Product A Updated\",\n\t\"description\": \"Description A Updated\",\n\t\"category\": \"Category A\",\n\t\"creationDate\": \"2023-01-02\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/products/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"products",
								"1"
							]
						},
						"description": "Updates an existing product identified by its ID (in the URL) with the new details provided in the request body. This includes name, description, category, and potentially the creation date."
					},
					"response": []
				}
			]
		},
		{
			"name": "Sales",
			"item": [
				{
					"name": "Get All Sales",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response is an array', function() {",
									"    pm.expect(pm.response.json()).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/sales",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"sales"
							]
						},
						"description": "Fetches all sales records from the system, including details such as sale ID, creation date, client information, seller name, and total amount of the sale."
					},
					"response": []
				},
				{
					"name": "Create Sale",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function() {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Response contains sale ID', function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.be.a('number');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"sale\": {\n    \"creationDate\": \"2023-01-03\",\n    \"clientId\": 1,\n    \"sellerName\": \"Seller 1\",\n    \"total\": 100.00\n  },\n  \"transactions\": [\n    {\n      \"productId\": 1,\n      \"quantity\": 2,\n      \"price\": 50.00\n    },\n    {\n      \"productId\": 2,\n      \"quantity\": 1,\n      \"price\": 50.00\n    }\n  ]\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/sales",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"sales"
							]
						},
						"description": "Creates a new sale record with multiple transactions. The request body must include the sale details (creation date, client ID, seller name, total amount) and an array of transactions, each specifying a product ID, quantity, and price."
					},
					"response": []
				},
				{
					"name": "Update Sale Transactions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200 or 204', function() {",
									"    pm.response.to.have.status(200) || pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n\t{\n\t\t\"id\": 3,\n\t\t\"saleId\": 3,\n\t\t\"productId\": 1,\n\t\t\"quantity\": 3,\n\t\t\"price\": 55.00\n\t}\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/sales/3/transactions",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"sales",
								"3",
								"transactions"
							]
						},
						"description": "Updates the transactions of an existing sale specified by the sale ID in the URL path. The request body should be an array of transaction objects, each with an ID (to identify the transaction to update), and the new quantity and price."
					},
					"response": []
				}
			]
		}
	]
}